// R√©cup√©ration du canvas et du contexte
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

// Boucle principale du jeu
let lastTime = 0;
function gameLoop(timestamp) {
  if (!lastTime) lastTime = timestamp;
  let deltaTime = timestamp - lastTime;
  lastTime = timestamp;
  update(deltaTime);
  draw();
  
  requestAnimationFrame(gameLoop);
}

// Initialisation du jeu
function init() {
  // Initialiser les listes audio et attendre leur chargement
  audioFilesReady = false;
  
  // Ajout d'un message de chargement dans la console
  console.log("üéµ Initialisation du syst√®me audio...");
  console.log("üîç Recherche de fichiers audio dans les dossiers assets/audio/musique/ et assets/audio/narration/...");
  
  // Cr√©er un √©l√©ment pour afficher le statut de chargement
  const loadingStatus = document.createElement('div');
  loadingStatus.style.position = 'fixed';
  loadingStatus.style.top = '10px';
  loadingStatus.style.left = '10px';
  loadingStatus.style.padding = '5px 10px';
  loadingStatus.style.background = 'rgba(0,0,0,0.7)';
  loadingStatus.style.color = '#ffaa00';
  loadingStatus.style.fontFamily = 'Arial, sans-serif';
  loadingStatus.style.fontSize = '14px';
  loadingStatus.style.borderRadius = '5px';
  loadingStatus.textContent = "Chargement des fichiers audio...";
  document.body.appendChild(loadingStatus);
  
  // Initialiser les listes audio
  initAudioLists();
  
  // V√©rifier si le son √©tait activ√© pr√©c√©demment
  audioConfig.soundEnabled = localStorage.getItem('soundEnabled') === 'true';
  
  // Initialiser les contr√¥les de volume avec les valeurs sauvegard√©es
  document.getElementById('musicVolume').value = audioConfig.musicVolume * 100;
  document.getElementById('narrationVolume').value = audioConfig.narrationVolume * 100;
  document.getElementById('sfxVolume').value = audioConfig.sfxVolume * 100;
  
  document.getElementById('musicVolumeValue').textContent = `${Math.round(audioConfig.musicVolume * 100)}%`;
  document.getElementById('narrationVolumeValue').textContent = `${Math.round(audioConfig.narrationVolume * 100)}%`;
  document.getElementById('sfxVolumeValue').textContent = `${Math.round(audioConfig.sfxVolume * 100)}%`;

  // Initialiser les checkbox des options audio
  document.getElementById('autoAdjustVolume').checked = audioConfig.autoAdjustVolume;
  document.getElementById('useFadeEffects').checked = audioConfig.useFadeEffects;
  
  // Attendre que les fichiers audio soient d√©tect√©s avant de lancer la musique
  let checkAudioReadyInterval = setInterval(() => {
    if (audioFilesReady) {
      clearInterval(checkAudioReadyInterval);
      console.log("‚úÖ Initialisation audio termin√©e");
      
      // Mettre √† jour le message de statut
      loadingStatus.style.color = '#00ff00';
      loadingStatus.textContent = `Audio charg√©: ${audioConfig.musicList.length} musiques, ${audioConfig.narrationList.length} narrations`;
      
      // Faire dispara√Ætre le message apr√®s 3 secondes
      setTimeout(() => {
        loadingStatus.style.opacity = '0';
        loadingStatus.style.transition = 'opacity 1s';
        // Supprimer l'√©l√©ment apr√®s la transition
        setTimeout(() => {
          document.body.removeChild(loadingStatus);
        }, 1000);
      }, 3000);
      
      // Lancer une musique al√©atoire si le son est activ√©
      if (audioConfig.soundEnabled && audioConfig.musicList.length > 0) {
        playRandomMusic();
      }
      
      // D√©marrer la boucle de jeu
      requestAnimationFrame(gameLoop);
    } else {
      // Mettre √† jour le message de chargement
      loadingStatus.textContent = `Recherche de fichiers audio... (${audioConfig.musicList.length + audioConfig.narrationList.length} trouv√©s)`;
    }
  }, 1000);
  
  // Timeout de s√©curit√© au cas o√π audioFilesReady ne serait jamais d√©fini √† true
  setTimeout(() => {
    if (!audioFilesReady) {
      audioFilesReady = true;
      console.warn("‚ö†Ô∏è D√©lai d'attente d√©pass√© pour la d√©tection audio");
      loadingStatus.style.color = '#ff5500';
      loadingStatus.textContent = "D√©tection audio incompl√®te - Certaines fonctionnalit√©s audio peuvent √™tre limit√©es";
    }
  }, 7000);
  
  // Charger l'√©tat des stats debug
  GAME_CONFIG.showDebugInfo = localStorage.getItem('showDebugInfo') === 'true';
  
  // Ajouter l'√©couteur d'√©v√©nement pour le redimensionnement
  window.addEventListener('resize', resizeCanvas);
  
  // Appeler resizeCanvas au chargement initial
  resizeCanvas();
}

// D√©marrer l'initialisation apr√®s chargement de la page
window.addEventListener('load', init); 